{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shreyansh\\\\Desktop\\\\STC\\\\teacher\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { Routes, Route, BrowserRouter as Router } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Admin from './Pages/Admin';\nimport Adminstu from './Pages/Adminstu';\nimport Login from './components/Login/Login';\nimport ExamResult from './components/Examresult/Examresult';\nimport OTPForm from './components/ForgetPassword/OTPForm';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [choice, setChoice] = useState(null);\n  useEffect(() => {\n    // Check if userChoice is already saved in localStorage\n    const savedChoice = localStorage.getItem('userChoice');\n    if (savedChoice) {\n      // If userChoice is saved, set choice based on it\n      setChoice(savedChoice === 'teacher');\n    }\n  }, []);\n  const handleUserChoice = isTeacher => {\n    // Update choice state and save userChoice to localStorage\n    setChoice(isTeacher);\n    localStorage.setItem('userChoice', isTeacher ? 'teacher' : 'student');\n  };\n  const isAdminLoggedIn = () => {\n    return localStorage.getItem('key') === '120';\n  };\n  const isStudentLoggedIn = () => {\n    return localStorage.getItem('key') === '123';\n  };\n\n  // Render modal to select user type if choice is not made yet\n  if (choice === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Who are you?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserChoice(true),\n          children: \"Teacher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUserChoice(false),\n          children: \"Student\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Check if the user needs to reset the password\n  const isForgetPassword = localStorage.getItem('fog') === 'true';\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isForgetPassword ? /*#__PURE__*/_jsxDEV(OTPForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [choice && isAdminLoggedIn() && /*#__PURE__*/_jsxDEV(Admin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 45\n        }, this), !choice && isStudentLoggedIn() && /*#__PURE__*/_jsxDEV(Adminstu, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 48\n        }, this), !isAdminLoggedIn() && !isStudentLoggedIn() && /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 60\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YhPFAYWmllUCB/MYemQUrRvsFS0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Routes","Route","BrowserRouter","Router","useState","useEffect","Admin","Adminstu","Login","ExamResult","OTPForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","choice","setChoice","savedChoice","localStorage","getItem","handleUserChoice","isTeacher","setItem","isAdminLoggedIn","isStudentLoggedIn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isForgetPassword","_c","$RefreshReg$"],"sources":["C:/Users/Shreyansh/Desktop/STC/teacher/src/App.js"],"sourcesContent":["import './App.css';\nimport { Routes, Route, BrowserRouter as Router } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Admin from './Pages/Admin';\nimport Adminstu from './Pages/Adminstu';\nimport Login from './components/Login/Login';\nimport ExamResult from './components/Examresult/Examresult';\nimport OTPForm from './components/ForgetPassword/OTPForm';\n\nfunction App() {\n  const [choice, setChoice] = useState(null);\n\n  useEffect(() => {\n    // Check if userChoice is already saved in localStorage\n    const savedChoice = localStorage.getItem('userChoice');\n    if (savedChoice) {\n      // If userChoice is saved, set choice based on it\n      setChoice(savedChoice === 'teacher');\n    }\n  }, []);\n\n  const handleUserChoice = (isTeacher) => {\n    // Update choice state and save userChoice to localStorage\n    setChoice(isTeacher);\n    localStorage.setItem('userChoice', isTeacher ? 'teacher' : 'student');\n  };\n\n  const isAdminLoggedIn = () => {\n    return localStorage.getItem('key') === '120';\n  };\n\n  const isStudentLoggedIn = () => {\n    return localStorage.getItem('key') === '123';\n  };\n\n  // Render modal to select user type if choice is not made yet\n  if (choice === null) {\n    return (\n      <div className=\"modal\">\n        <div className=\"modal-content\">\n          <h2>Who are you?</h2>\n          <button onClick={() => handleUserChoice(true)}>Teacher</button>\n          <button onClick={() => handleUserChoice(false)}>Student</button>\n        </div>\n      </div>\n    );\n  }\n\n  // Check if the user needs to reset the password\n  const isForgetPassword = localStorage.getItem('fog') === 'true';\n\n  return (\n    <Router>\n      <div>\n        {isForgetPassword ? (\n          <OTPForm />\n        ) : (\n          <>\n            {choice && isAdminLoggedIn() && <Admin />}\n            {!choice && isStudentLoggedIn() && <Adminstu />}\n            {!isAdminLoggedIn() && !isStudentLoggedIn() && <Login />}\n          </>\n        )}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}