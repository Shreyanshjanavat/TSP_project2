{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shreyansh\\\\Desktop\\\\STC\\\\teacher\\\\src\\\\Createtest\\\\Testinput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './Testinput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Testinput = () => {\n  _s();\n  const {\n    className,\n    totalMarks,\n    subject\n  } = useParams();\n  const [testdata, setTestdata] = useState([]);\n  const [inputValues, setInputValues] = useState({});\n  const [productdetails, setProductdetails] = useState({\n    name: \"\",\n    image: \"\",\n    phoneno: \"\",\n    alternatephoneno: \"\",\n    subject: \"\",\n    age: \"\",\n    gender: \"male\"\n  });\n  const changehandler = e => {\n    setProductdetails({\n      ...productdetails,\n      [e.target.name]: e.target.value\n    });\n  };\n  const ADD_product = async () => {\n    console.log(productdetails);\n    let responsedata;\n    let product = productdetails;\n    let formdata = new FormData();\n    formdata.append('product', image);\n    await fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json'\n      },\n      body: formdata\n    }).then(resp => resp.json()).then(data => responsedata = data);\n    if (responsedata.success) {\n      product.image = responsedata.image_url;\n      console.log(product);\n      await fetch('http://localhost:5000/Addteacher', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(product)\n      }).then(resp => resp.json()).then(data => {\n        data.success ? alert(\"Teacher Detail Add\") : alert(\"Failed\");\n      });\n    } else {\n      alert(responsedata.errors);\n    }\n  };\n  const fetchInfo = async className => {\n    try {\n      const response = await fetch(`http://localhost:5000/classdata?classNumber=${className}`);\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setTestdata(data);\n      } else {\n        console.error(\"Data fetched is not an array:\", data);\n        setTestdata([]);\n      }\n    } catch (error) {\n      console.log(\"Error in fetching data\", error);\n    }\n  };\n  useEffect(() => {\n    fetchInfo(className);\n  }, [className]);\n  const handleChange = (e, id) => {\n    const {\n      value\n    } = e.target;\n    setInputValues({\n      ...inputValues,\n      [id]: value\n    });\n    console.log(inputValues);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`http://localhost:5000/Testdata`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          className,\n          inputValues\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"Data updated successfully\", data);\n        fetchInfo(className); // Re-fetch data to reflect updates\n      } else {\n        console.error(\"Failed to update data\");\n      }\n    } catch (error) {\n      console.error(\"Error in submitting data\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"student-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-product\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"All Student List of \", className]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list-format-main\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Student Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Roll No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Total Marks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Marks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"listproduct-allproduct\",\n          children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), testdata.map((product, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-format-main listproduct-format\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: product.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: product.RollNo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: totalMarks\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: inputValues[product.RollNo] || '',\n              onChange: e => handleChange(e, product.RollNo)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(Testinput, \"tOMwhXj5B+tjppIlk+W+PKeeMfs=\", false, function () {\n  return [useParams];\n});\n_c = Testinput;\nexport default Testinput;\nvar _c;\n$RefreshReg$(_c, \"Testinput\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","Testinput","_s","className","totalMarks","subject","testdata","setTestdata","inputValues","setInputValues","productdetails","setProductdetails","name","image","phoneno","alternatephoneno","age","gender","changehandler","e","target","value","ADD_product","console","log","responsedata","product","formdata","FormData","append","fetch","method","headers","Accept","body","then","resp","json","data","success","image_url","JSON","stringify","alert","errors","fetchInfo","response","Array","isArray","error","handleChange","id","handleSubmit","preventDefault","ok","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","index","RollNo","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Shreyansh/Desktop/STC/teacher/src/Createtest/Testinput.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './Testinput.css';\r\n\r\nconst Testinput = () => {\r\n  const { className, totalMarks,subject } = useParams();\r\n  const [testdata, setTestdata] = useState([]);\r\n  const [inputValues, setInputValues] = useState({});\r\n\r\nconst [productdetails,setProductdetails]=useState({\r\n    name:\"\",\r\n    image:\"\",\r\n    phoneno:\"\",\r\n    alternatephoneno:\"\",\r\n    subject:\"\",\r\n    age:\"\",\r\n    gender:\"male\",\r\n  })\r\n  const changehandler=(e)=>{\r\n    setProductdetails({...productdetails,[e.target.name]:e.target.value})\r\n  }\r\n  const ADD_product =async()=>{\r\n      console.log(productdetails)\r\n      let responsedata;\r\n      let product=productdetails;\r\n      let formdata=new FormData();\r\n      formdata.append('product',image);\r\n      await fetch('http://localhost:5000/upload',{\r\n        method:'POST',\r\n        headers:\r\n        {\r\n          Accept:'application/json',\r\n        },\r\n        body:formdata,\r\n      }).then((resp)=>resp.json()).then((data)=>(responsedata=data))\r\n\r\n      if(responsedata.success){\r\n        product.image=responsedata.image_url;\r\n        console.log(product);\r\n      \r\n        await fetch('http://localhost:5000/Addteacher',{\r\n        method:'POST',\r\n        headers:\r\n        {\r\n          Accept:'application/json',\r\n         'Content-Type':'application/json',\r\n        },\r\n        body:JSON.stringify(product),\r\n      }).then((resp)=>resp.json()).then((data)=>{\r\n        data.success?alert(\"Teacher Detail Add\"):alert(\"Failed\")\r\n      })\r\n    }\r\n    else\r\n    {\r\n        alert(responsedata.errors);\r\n    }\r\n      \r\n  }\r\n  const fetchInfo = async (className) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/classdata?classNumber=${className}`);\r\n      const data = await response.json();\r\n\r\n      if (Array.isArray(data)) {\r\n        setTestdata(data);\r\n      } else {\r\n        console.error(\"Data fetched is not an array:\", data);\r\n        setTestdata([]);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error in fetching data\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchInfo(className);\r\n  }, [className]);\r\n\r\n  const handleChange = (e, id) => {\r\n    const { value } = e.target;\r\n    setInputValues({ ...inputValues, [id]: value });\r\n    console.log(inputValues);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/Testdata`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ className, inputValues }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(\"Data updated successfully\", data);\r\n        fetchInfo(className); // Re-fetch data to reflect updates\r\n      } else {\r\n        console.error(\"Failed to update data\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error in submitting data\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='student-container'>\r\n      <div className=\"list-product\">\r\n        <h2>All Student List of {className}</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"list-format-main\">\r\n            <p>Student Name</p>\r\n            <p>Roll No</p>\r\n            <p>Total Marks</p>\r\n            <p>Marks</p>\r\n          </div>\r\n          <div className=\"listproduct-allproduct\">\r\n            <hr />\r\n            {testdata.map((product, index) => (\r\n              <div key={index} className='list-format-main listproduct-format'>\r\n                <p>{product.name}</p>\r\n                <p>{product.RollNo}</p>\r\n                <p>{totalMarks}</p>\r\n                <input\r\n                  type='text'\r\n                  value={inputValues[product.RollNo] || ''}\r\n                  onChange={(e) => handleChange(e, product.RollNo)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Testinput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}