{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shreyansh\\\\Desktop\\\\STC\\\\teacher\\\\src\\\\components\\\\Testresult\\\\TestResult.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './TestResult.css';\n\n// Utility function to calculate percentage gain\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction calculatePercentGain(totalMarks, obtainedMarks) {\n  return obtainedMarks / totalMarks * 100;\n}\nfunction TestResult() {\n  _s();\n  const [data, setData] = useState([]);\n  const [id, setId] = useState(null);\n  const [classNumber, setClassNumber] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [response, setResponse] = useState(null);\n  const RollNo = localStorage.getItem('user');\n  const [to, setTo] = useState('');\n  const [message, setMessage] = useState('');\n  const sendSms = async () => {\n    try {\n      const res = await axios.post('http://localhost:5000/send-sms', {\n        to,\n        message\n      });\n      setResponse(res.data);\n    } catch (error) {\n      setResponse(error.response.data);\n    }\n  };\n\n  // Fetch student data by RollNo\n  const fetchStudentData = async RollNo => {\n    try {\n      const response = await fetch(`http://localhost:5000/studentdata?RollNo=${RollNo}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      if (data.length > 0) {\n        setTo(data[0].Phoneno);\n        setId(data[0].id);\n        setClassNumber(data[0].classNumber);\n      } else {\n        throw new Error('No student data found');\n      }\n    } catch (error) {\n      setError(error.message);\n      setLoading(false); // Set loading to false on error\n    }\n  };\n\n  // Fetch test data by classNumber\n  const fetchTestData = async classNumber => {\n    try {\n      const response = await fetch(`http://localhost:5000/testdata1?classNumber=${classNumber}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setData(data);\n      } else {\n        throw new Error('Data is not an array');\n      }\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false); // Ensure loading is set to false in the finally block\n    }\n  };\n  useEffect(() => {\n    if (RollNo) {\n      fetchStudentData(RollNo);\n    }\n  }, [RollNo]);\n  useEffect(() => {\n    if (classNumber !== null) {\n      fetchTestData(classNumber);\n    }\n  }, [classNumber]);\n  useEffect(() => {\n    if (id && data.length > 0) {\n      // Construct the message here\n      let messageBody = 'Your child\\'s exam results:\\n';\n      data.forEach(product => {\n        const studentTestData = product.Testdata && product.Testdata.find(test => test.id === id);\n        const obtainedMarks = studentTestData ? studentTestData.marks : 0;\n        const percentage = studentTestData ? calculatePercentGain(product.Totalmarks, obtainedMarks) : 0;\n        messageBody += `${product.Subject}: ${obtainedMarks}/${product.Totalmarks} (${percentage.toFixed(2)}%)\\n`;\n      });\n      setMessage(messageBody);\n    }\n  }, [id, data]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"appa\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"appa-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Marks Table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-format-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Subject:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Total Marks:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Obtained Marks:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Percentage Gain:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: data.map((product, index) => {\n          const studentTestData = product.Testdata && product.Testdata.find(test => test.id === id);\n          const obtainedMarks = studentTestData ? studentTestData.marks : 0;\n          const percentage = studentTestData ? calculatePercentGain(product.Totalmarks, obtainedMarks) : 0;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `list-format-main listproduct-format ${percentage < 33 ? 'low-percentage' : 'low-percent1'} `,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: product.Subject\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: product.Totalmarks\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: obtainedMarks\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [percentage.toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendSms,\n        children: \"Send SMS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(response, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(TestResult, \"NXxOmtAJaoq2LVY9G9K2QJcqRQw=\");\n_c = TestResult;\nexport default TestResult;\nvar _c;\n$RefreshReg$(_c, \"TestResult\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","calculatePercentGain","totalMarks","obtainedMarks","TestResult","_s","data","setData","id","setId","classNumber","setClassNumber","loading","setLoading","error","setError","response","setResponse","RollNo","localStorage","getItem","to","setTo","message","setMessage","sendSms","res","post","fetchStudentData","fetch","ok","Error","json","length","Phoneno","fetchTestData","Array","isArray","messageBody","forEach","product","studentTestData","Testdata","find","test","marks","percentage","Totalmarks","Subject","toFixed","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onClick","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/Shreyansh/Desktop/STC/teacher/src/components/Testresult/TestResult.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './TestResult.css';\r\n\r\n// Utility function to calculate percentage gain\r\nfunction calculatePercentGain(totalMarks, obtainedMarks) {\r\n  return (obtainedMarks / totalMarks) * 100;\r\n}\r\n\r\nfunction TestResult() {\r\n  const [data, setData] = useState([]);\r\n  const [id, setId] = useState(null);\r\n  const [classNumber, setClassNumber] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [response, setResponse] = useState(null);\r\n  const RollNo = localStorage.getItem('user');\r\n  const [to, setTo] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  const sendSms = async () => {\r\n    try {\r\n      const res = await axios.post('http://localhost:5000/send-sms', { to, message });\r\n      setResponse(res.data);\r\n    } catch (error) {\r\n      setResponse(error.response.data);\r\n    }\r\n  };\r\n\r\n  // Fetch student data by RollNo\r\n  const fetchStudentData = async (RollNo) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/studentdata?RollNo=${RollNo}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      if (data.length > 0) {\r\n        setTo(data[0].Phoneno);\r\n        setId(data[0].id);\r\n        setClassNumber(data[0].classNumber);\r\n      } else {\r\n        throw new Error('No student data found');\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n      setLoading(false); // Set loading to false on error\r\n    }\r\n  };\r\n\r\n  // Fetch test data by classNumber\r\n  const fetchTestData = async (classNumber) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/testdata1?classNumber=${classNumber}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        setData(data);\r\n      } else {\r\n        throw new Error('Data is not an array');\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false); // Ensure loading is set to false in the finally block\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (RollNo) {\r\n      fetchStudentData(RollNo);\r\n    }\r\n  }, [RollNo]);\r\n\r\n  useEffect(() => {\r\n    if (classNumber !== null) {\r\n      fetchTestData(classNumber);\r\n    }\r\n  }, [classNumber]);\r\n\r\n  useEffect(() => {\r\n    if (id && data.length > 0) {\r\n      // Construct the message here\r\n      let messageBody = 'Your child\\'s exam results:\\n';\r\n      data.forEach(product => {\r\n        const studentTestData = product.Testdata && product.Testdata.find(test => test.id === id);\r\n        const obtainedMarks = studentTestData ? studentTestData.marks : 0;\r\n        const percentage = studentTestData ? calculatePercentGain(product.Totalmarks, obtainedMarks) : 0;\r\n        messageBody += `${product.Subject}: ${obtainedMarks}/${product.Totalmarks} (${percentage.toFixed(2)}%)\\n`;\r\n      });\r\n      setMessage(messageBody);\r\n    }\r\n  }, [id, data]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"appa\">\r\n      <header className=\"appa-header\">\r\n        <h1>Marks Table</h1>\r\n        <div className=\"list-format-main\">\r\n          <p>Subject:</p>\r\n          <p>Total Marks:</p>\r\n          <p>Obtained Marks:</p>\r\n          <p>Percentage Gain:</p>\r\n        </div>\r\n        <div className=\"grid-container\">\r\n          {data.map((product, index) => {\r\n            const studentTestData = product.Testdata && product.Testdata.find(test => test.id === id);\r\n            const obtainedMarks = studentTestData ? studentTestData.marks : 0;\r\n            const percentage = studentTestData ? calculatePercentGain(product.Totalmarks, obtainedMarks) : 0;\r\n\r\n            return (\r\n              <div key={index} className={`list-format-main listproduct-format ${percentage < 33 ? 'low-percentage' : 'low-percent1'} `}>\r\n                <p>{product.Subject}</p>\r\n                <p>{product.Totalmarks}</p>\r\n                <p>{obtainedMarks}</p>\r\n                <p>{percentage.toFixed(2)}%</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <button onClick={sendSms}>Send SMS</button>\r\n        {response && (\r\n          <div>\r\n            <h3>Response</h3>\r\n            <pre>{JSON.stringify(response, null, 2)}</pre>\r\n          </div>\r\n        )}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestResult;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}