{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shreyansh\\\\Desktop\\\\STC\\\\teacher\\\\src\\\\components\\\\Chatbox\\\\ReceivedMessage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './ReceivedMessage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReceivedMessage = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [date, setDate] = useState('');\n  const [replyId, setReplyId] = useState(null);\n  const [preMessage, setPreMessage] = useState('');\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    const fetchMessageDetails = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/teachchat?Teacher_id=${id}`);\n        const data = await response.json();\n        if (data && data.length > 0) {\n          const lastMessage = data[data.length - 1];\n          setMessage(lastMessage.Message);\n          setReplyId(lastMessage.Replyid);\n          setDate(new Date(lastMessage.Date).toLocaleDateString());\n          if (lastMessage.Replyid !== 0) {\n            const replyResponse = await fetch(`http://localhost:5000/chatbyid?id=${lastMessage.Replyid}`);\n            const replyData = await replyResponse.json();\n            if (replyData && replyData.length > 0) {\n              setPreMessage(replyData[replyData.length - 1].Message);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching message details:', error);\n      }\n    };\n    fetchMessageDetails();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-details-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Replied Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Date: \", date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), preMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Previous Message: \", preMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-content\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(ReceivedMessage, \"xMMzcxPXHqb3/sbcGiTp0v19yhA=\", false, function () {\n  return [useParams];\n});\n_c = ReceivedMessage;\nexport default ReceivedMessage;\nvar _c;\n$RefreshReg$(_c, \"ReceivedMessage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","ReceivedMessage","_s","message","setMessage","date","setDate","replyId","setReplyId","preMessage","setPreMessage","id","fetchMessageDetails","response","fetch","data","json","length","lastMessage","Message","Replyid","Date","toLocaleDateString","replyResponse","replyData","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shreyansh/Desktop/STC/teacher/src/components/Chatbox/ReceivedMessage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './ReceivedMessage.css';\r\n\r\nconst ReceivedMessage = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [replyId, setReplyId] = useState(null);\r\n  const [preMessage, setPreMessage] = useState('');\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchMessageDetails = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/teachchat?Teacher_id=${id}`);\r\n        const data = await response.json();\r\n\r\n        if (data && data.length > 0) {\r\n          const lastMessage = data[data.length - 1];\r\n          setMessage(lastMessage.Message);\r\n          setReplyId(lastMessage.Replyid);\r\n          setDate(new Date(lastMessage.Date).toLocaleDateString());\r\n          \r\n          if (lastMessage.Replyid !== 0) {\r\n            const replyResponse = await fetch(`http://localhost:5000/chatbyid?id=${lastMessage.Replyid}`);\r\n            const replyData = await replyResponse.json();\r\n            if (replyData && replyData.length > 0) {\r\n              setPreMessage(replyData[replyData.length - 1].Message);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching message details:', error);\r\n      }\r\n    };\r\n\r\n    fetchMessageDetails();\r\n  }, [id]);\r\n\r\n  return (\r\n    <div className=\"message-details-container\">\r\n      <div className=\"message-header\">\r\n      <h2>Replied Message</h2>\r\n      <p>Date: {date}</p>\r\n       \r\n        {preMessage && <p>Previous Message: {preMessage}</p>}\r\n\r\n      </div>\r\n      <div className=\"message-content\">\r\n        <p>{message}</p>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReceivedMessage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}