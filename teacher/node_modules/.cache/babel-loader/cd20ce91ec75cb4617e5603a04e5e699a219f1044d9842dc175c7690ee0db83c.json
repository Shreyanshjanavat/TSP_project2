{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shreyansh\\\\Desktop\\\\STC\\\\teacher\\\\src\\\\components\\\\Chatbox\\\\ReceivedMessage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n// import './MessageDetails.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReceivedMessage = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [date, setDate] = useState('');\n  const [Replyid, setReplyid] = useState(null);\n  const [premessage, setPremessage] = useState('');\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    const fetchMessageDetails = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/chatbyid?id=${id}`);\n        const data = await response.json();\n        if (data && data.length > 0) {\n          setMessage(data[data.length - 1]);\n          // Make sure the API response includes TeacherName\n          setReplyid(data[data.len].Replyid);\n          setDate(new Date(latestMessage.Date).toLocaleDateString());\n          alert(Replyid);\n          // Fetch the original message if Replyid is not 0\n          if (latestMessage.Replyid !== 0) {\n            const response = await fetch(`http://localhost:5000/replychat?Replyid=${latestMessage.Replyid}`);\n            const replyData = await response.json();\n            if (replyData && replyData.length > 0) {\n              setPremessage(replyData[replyData.length - 1].Message);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching message details:', error);\n      }\n    };\n    fetchMessageDetails();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-details-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Replied Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), premessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Previous Message: \", premessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-content\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ReceivedMessage, \"j1F409URoQCYBqTW66mWrOVrK/0=\", false, function () {\n  return [useParams];\n});\n_c = ReceivedMessage;\nexport default ReceivedMessage;\nvar _c;\n$RefreshReg$(_c, \"ReceivedMessage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","ReceivedMessage","_s","message","setMessage","date","setDate","Replyid","setReplyid","premessage","setPremessage","id","fetchMessageDetails","response","fetch","data","json","length","len","Date","latestMessage","toLocaleDateString","alert","replyData","Message","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shreyansh/Desktop/STC/teacher/src/components/Chatbox/ReceivedMessage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n// import './MessageDetails.css';\r\n\r\nconst ReceivedMessage = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [Replyid, setReplyid] = useState(null);\r\n  const [premessage, setPremessage] = useState('');\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchMessageDetails = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/chatbyid?id=${id}`);\r\n        const data = await response.json();\r\n\r\n        if (data && data.length > 0) {\r\n          \r\n          setMessage(data[data.length - 1]);\r\n           // Make sure the API response includes TeacherName\r\n          setReplyid(data[data.len].Replyid);\r\n          setDate(new Date(latestMessage.Date).toLocaleDateString());\r\n          alert(Replyid);\r\n          // Fetch the original message if Replyid is not 0\r\n          if (latestMessage.Replyid !== 0) {\r\n            const response = await fetch(`http://localhost:5000/replychat?Replyid=${latestMessage.Replyid}`);\r\n            const replyData = await response.json();\r\n            if (replyData && replyData.length > 0) {\r\n              setPremessage(replyData[replyData.length - 1].Message);\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching message details:', error);\r\n      }\r\n    };\r\n\r\n    fetchMessageDetails();\r\n  }, [id]);\r\n\r\n  return (\r\n    <div className=\"message-details-container\">\r\n      <div className=\"message-header\">\r\n        <h2>Replied Message</h2>\r\n        {premessage && <p>Previous Message: {premessage}</p>}\r\n        <p>{date}</p>\r\n      </div>\r\n      <div className=\"message-content\">\r\n        <p>{message}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReceivedMessage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}